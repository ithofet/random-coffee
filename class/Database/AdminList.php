<?php
require_once "DataBaseAuth.php";
require_once "EventDB.php";
require_once "UsersDB.php";
require_once "MeetingHistoryDB.php";

class AdminList extends DataBaseAuth
{
    private function generateText(int $status): string
    {
        switch ($status) {
            case 0:
                return "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/help, /ls, /menu - —Å–ø—Ä–∞–≤–∫–∞ (—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)
";
            case 1:
                return $this->generateText(($status - 1)) . "/approve - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
/statistic - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∏—è
";
            case 2:
                return $this->generateText(($status - 1)) . "/start_event - –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω—Ç
/new_editor - –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
/delete_editor - —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
";
            default:
                return $this->generateText(($status - 1)) . "/new_admin - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/delete_admin - —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/admin_list - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
/transfer_ownership - –ø–µ—Ä–µ–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ";
        }
    }

    private function getButton(string $text): array
    {
        return
            array(
                "action" => array(
                    "type" => "text",
                    "label" => "$text",
                    "payload" => ""
                ),
                "color" => "secondary"
            );
    }

    private function generateButtons(int $status): array
    {
        $arr = array();
        for ($i = 0; $i <= $status; $i++) {
            switch ($i) {
                case 0:
                    array_push($arr,
                        array($this->getButton("/help")));
                    break;
                case 1:
                    array_push($arr, array($this->getButton("/approve")),
                        array($this->getButton("/statistic")));
                    break;
                case 2:
                    array_push($arr, array($this->getButton("/start_event")),
                        array($this->getButton("/new_editor"),
                            $this->getButton("/delete_editor")));
                    break;
                case 3:
                    array_push($arr, array($this->getButton("/new_admin"),
                        $this->getButton("/delete_admin")),
                        array($this->getButton("/admin_list")),
                        array($this->getButton("/transfer_ownership")));
                    break;
            }
        }
        return $arr;
    }

    private function approve(Sender $vk)
    {
        $db = new EventDB();
        $num = $db->countNeedAllow();
        if ($num > 0) {
            $keyboard = array("one_time" => true,
                "buttons" =>
                    array(
                        array(
                            $this->getButton("/yes"),
                            $this->getButton("/always yes")
                        ),
                        array(

                            $this->getButton("/no"),
                            $this->getButton("/ban"),
                        )
                    )
            );
            $id = (int)$db->needAllow();
            $vk->send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: $num\n@id$id", $keyboard);
        } else {
            $vk->send("–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç!");
        }
    }

    public function addEditor(int $id, int $self): string
    {
        $this->rmUser($id);
        if ($this->getDb()->exec("INSERT INTO adminList (chat_id, degree, appointedBy) VALUES ($id, 1, $self)"))
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω";
        else
            return "–û—à–∏–±–∫–∞";
    }

    public function rmUser(int $id): string
    {
        if ($this->getDb()->exec("DELETE FROM adminList WHERE chat_id LIKE $id"))
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω";
        else
            return "–û—à–∏–±–∫–∞";
    }

    public function addAdmin(int $id, int $self): string
    {
        $this->rmUser($id);
        if ($this->getDb()->exec("INSERT INTO adminList (chat_id, degree, appointedBy) VALUES ($id, 2, $self)"))
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω";
        else
            return "–û—à–∏–±–∫–∞";
    }

    public function editOwner(int $id, int $self): string
    {
        $this->rmUser($id);
        $this->rmUser($self);
        $this->addAdmin($self, $self);
        if ($this->getDb()->exec("INSERT INTO adminList (chat_id, degree, appointedBy) VALUES ($id, 3, $self)"))
            return "–í–ª–∞–¥–µ–ª–µ—Ü —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω";
        else
            return "–û—à–∏–±–∫–∞";
    }

    private function locSender(int $a, int $b)
    {
        $vk = new Sender(0);
        $vk->sendTo($a, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ–µ–∫—Ç Random coffee.
–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @id$b
–ñ–µ–ª–∞—é –∫—Ä—É—Ç–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è! –£–¥–∞—á–∏!");
        $vk->sendTo($b, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ–µ–∫—Ç Random coffee.
–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @id$a
–ñ–µ–ª–∞—é –∫—Ä—É—Ç–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è! –£–¥–∞—á–∏!");
    }

    private function startEvent(Sender $vk)
    {
        $event = new EventDB();
        $users = $event->getUsers();
        if ($users == false)
            return;
        $loner = null;
        shuffle($users);
        if (count($users) % 2) {
            $loner = array_pop($users);
        }

        $globalCounter = 0;
        $offset = count($users) / 2;
        do {
            $globalCounter++;
            shuffle($users);
            $halfOf = array_chunk($users, $offset);
            $group1 = $halfOf[0];
            $group2 = $halfOf[1];

            $out = fopen('input.txt', 'w');
            $meetings = new MeetingHistoryDB();
            fwrite($out, count($users));
            for ($i = 0; $i < count($group1); $i++) {
                $blackList = $meetings->blackList($group1[$i]);
                $keys = array_keys(array_diff($group2, $blackList));
                $size = count($keys);
                $line = "\n$size ";
                for ($j = 0; $j < count($keys); $j++) {
                    $line .= $keys[$j] + $offset . " ";
                }
                fwrite($out, $line);
            }
            fclose($out);
            exec("./../../cpp/main");
            $fd = fopen("output.txt", 'r');
            $res = fgets($fd);
            fclose($fd);
        } while ($res != count($keys) && $globalCounter < 5);

        $history = new MeetingHistoryDB();
        $fd = fopen("output.txt", 'r');
        $size = fgets($fd);
        $state = new UsersDB();
        for ($i = 0; $i < $size; $i++) {
            $str = fgets($fd);
            preg_match_all("/\d+/", $str, $matches);
            $this->locSender($users[$matches[0][0]], $users[$matches[0][1]]);
            $history->addMeet($users[$matches[0][0]], $users[$matches[0][1]]);
            $state->newMeet($users[$matches[0][0]]);
            $state->newMeet($users[$matches[0][1]]);
        }
        $this->getDb()->exec("TRUNCATE event");
        if ($loner !== null) {
            $vk->send("–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–∞—Ä—É –¥–ª—è @id$loner\n");
        }
        $vk->send("–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
    }

    public function newCommand(string $line, Sender $vk)
    {
        $text = "";
        switch ($line) {
            case "/statistic":
                $event = new EventDB();
                $arr = $event->statistic();
                $text = "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üèÅ–í—Å–µ–≥–æ: {$arr[0]}
‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {$arr[1]}
‚ö†–û–∂–∏–¥–∞—é—Ç: {$arr[2]}
‚ùå–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {$arr[3]}";
                $vk->send($text);
                break;
            case "/approve":
                $this->approve($vk);
                break;
            case "/always yes":
                $user = new UsersDB();
                $res = $vk->getLastId();
                if ($res != 0)
                    $user->premium($res);
            case "/yes":
                $a = new EventDB();
                $res = $vk->getLastId();
                if ($res != 0) {
                    $a->accessUser($res);
                    $this->approve($vk);
                    $vk->sendTo($res, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!");
                } else {
                    $vk->send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                }
                break;
            case "/ban":
                $user = new UsersDB();
                $res = $vk->getLastId();
                if ($res != 0)
                    $user->ban($res);
            case "/no":
                $a = new EventDB();
                $res = $vk->getLastId();
                if ($res != 0) {
                    $a->denialUser($res);
                    $this->approve($vk);
                } else {
                    $vk->send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                }
                break;
            case "/menu":
            case "/ls":
            case "/help":
                $text = $this->generateText($vk->adminPosition());
                $keyboard = array("one_time" => true,
                    "buttons" => $this->generateButtons($vk->adminPosition())
                );
                $vk->send($text, $keyboard);
                break;
            case "/admin_list":
                $arr = $this->getDb()->query("SELECT * FROM adminList")->fetchAll();
                $text = "–°–ø–∏—Å–æ–∫ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö:\n";
                for ($i = 0; $i < count($arr); $i++) {
                    $text .= "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @id{$arr[$i][1]}\n";
                    $text .= "–î–æ–ª–∂–Ω–æ—Å—Ç—å: ";
                    switch ($arr[$i][2]) {
                        case 1:
                            $text .= "–†–µ–¥–∞–∫—Ç–æ—Ä";
                            break;
                        case 2:
                            $text .= "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
                            break;
                        case 3:
                            $text .= "–í–ª–∞–¥–µ–ª–µ—Ü";
                            break;
                    }
                    $text .= "\n–ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @id{$arr[$i][3]}\n{$arr[$i][4]}\n\n";
                }
                $vk->send($text);
                break;
            case "/start_event":
                if ($vk->adminPosition() >= 2 && $vk->getLastMessage() == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ") {
                    $this->startEvent($vk);
                    $vk->send("Done");
                } elseif ($vk->adminPosition() >= 2) {
                    $vk->send("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ", array("one_time" => true, "buttons" =>array(
                        array($this->getButton("/start_event")),
                        array($this->getButton("/menu"))
                    )));
                } else {
                    $vk->send("Access denied");
                }
                break;
            case "/new_editor":
                if ($vk->adminPosition() >= 2)
                    $vk->send("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞");
                else
                    $vk->send("Access denied");
                break;
            case "/delete_editor":
                if ($vk->adminPosition() >= 2)
                    $vk->send("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞");
                else
                    $vk->send("Access denied");
                break;
            case "/new_admin":
                if ($vk->adminPosition() >= 3)
                    $vk->send("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
                else
                    $vk->send("Access denied");
                break;
            case "/delete_admin":
                if ($vk->adminPosition() >= 3)
                    $vk->send("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
                else
                    $vk->send("Access denied");
                break;
            case "/transfer_ownership":
                if ($vk->adminPosition() >= 3)
                    $vk->send("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–æ–º");
                else
                    $vk->send("Access denied");
                break;
            default:
                $vk->send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                break;
        }
    }


}